{
  "info": {
    "name": "API-02 Reply Message Test Cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8091" },
    { "key": "adminToken", "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwOTEvdXNlcnMvbG9naW4iLCJpYXQiOjE3NTYwMTEwNjksImV4cCI6MTc3MTYxMTA2OSwibmJmIjoxNzU2MDExMDY5LCJqdGkiOiJJRzY5bkhwNUl0OWJHVUZaIiwic3ViIjoiMSIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJyb2xlIjoiYWRtaW4ifQ.XHMrYL58F0_z1sXct4nr9FRK8gQUNIfSDpgxZlRMeaA" },
    { "key": "customerToken", "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwOTEvdXNlcnMvbG9naW4iLCJpYXQiOjE3NTU5OTIxNTYsImV4cCI6MTc3MTU5MjE1NiwibmJmIjoxNzU1OTkyMTU2LCJqdGkiOiIxZmhqVVhWY1RrMzYxSHpaIiwic3ViIjoiMiIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJyb2xlIjoidXNlciJ9.ulaHab_6DEfeQW7X5zgZYSXYOvY_M7-yYuQgMMFTqBQ" },
    { "key": "invalidToken", "value": "abcdefXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwOTEvdXNlcnMvbG9naW4iLCJpYXQiOjE3NTU5OTIxNTYsImV4cCI6MTc3MTU5MjE1NiwibmJmIjoxNzU1OTkyMTU2LCJqdGkiOiIxZmhqVVhWY1RrMzYxSHpaIiwic3ViIjoiMiIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJyb2xlIjoidXNlciJ9.ulaHab_6DEfeQW7X5zZYSXYOvY_M7-yYuQgMMFTqBQ" },
    { "key": "messageId_valid", "value": "1" },
    { "key": "messageId_notFound", "value": "999999" }
  ],

  "auth": {
  "type": "bearer",
  "bearer": [
    { "key": "token", "value": "{{adminToken}}", "type": "string" }
  ]
},

  "item": [
    {
      "name": "TC01 - Reply with minimum-length message",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"A\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC02 - Reply with upper-bound message",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "if (pm.response.code === 201) {",
            "    pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "} else {",
            "    pm.test('Status code is 400 for too long', function () { pm.response.to.have.status(400); });",
            "}"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC03 - Reply with mid-range message",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Thanks for your help\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC04 - Empty message",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 422 for empty message', function () { pm.response.to.have.status(422); });"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC05 - Above upper bound",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 422 for message too long', function () { pm.response.to.have.status(422); });"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC06 - Message only spaces",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"   \"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC07 - Message with Unicode/emoji",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Cáº£m Æ¡n báº¡n ðŸ˜Š\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC08 - Message with newline",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\\nWorld\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC09 - messageId not found",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_notFound}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_notFound}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 404', function () { pm.response.to.have.status(404); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC10 - messageId non-numeric",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/abc/reply", "host": ["{{baseUrl}}"], "path": ["messages", "abc", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 422', function () {",
            "  pm.expect(422).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC11 - messageId = 0 (lower boundary)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/0/reply", "host": ["{{baseUrl}}"], "path": ["messages", "0", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 404 or 400', function () {",
            "  pm.expect([404,400]).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC12 - messageId negative",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/-1/reply", "host": ["{{baseUrl}}"], "path": ["messages", "-1", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 404 or 400', function () {",
            "  pm.expect([404,400]).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC13 - Missing Content-Type",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 415 or 400', function () {",
            "  pm.expect([415,400]).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC14 - Wrong Content-Type",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "text/plain" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 415 or 400', function () {",
            "  pm.expect([415,400]).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC15 - Malformed JSON body",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 400', function () { pm.response.to.have.status(400); });"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC16 - Extra undefined field",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"OK\",\"extra\":\"x\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC17 - Customer replies to own message",
      "request": {
        "method": "POST",
        "auth": {
            "type": "bearer",
            "bearer": [
            { "key": "token", "value": "{{customerToken}}", "type": "string" }
            ]
        },
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Customer reply\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC18 - Unexpected Accept header",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Accept", "value": "text/html" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC19 - Max-length with multi-byte Unicode",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"ðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜ŠðŸ˜Š\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC20 - Leading/trailing spaces trimmed",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"  hello  \"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');",
            "pm.expect(json).to.have.property('id').that.is.a('number');",
            "pm.expect(json).to.have.property('created_at');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC21 - Missing Authorization",
      "request": {
        "method": "POST",
        "auth": { "type": "noauth" },
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });",
            "const json = pm.response.json();",
            "pm.expect(json).to.have.property('message');"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC22 - Invalid/expired token",
      "request": {
        "method": "POST",
        "auth": {
            "type": "bearer",
            "bearer": [ { "key": "token", "value": "{{invalidToken}}", "type": "string" } ]
        },
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 401', function () { pm.response.to.have.status(401); });"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC23 - Customer replies invalid message",
      "request": {
        "method": "POST",
        "auth": {
            "type": "bearer",
            "bearer": [ { "key": "token", "value": "{{customerToken}}", "type": "string" } ]
        },
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_notFound}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_notFound}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 404 or 400', function () {",
            "  pm.expect([404,400]).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC24 - XSS payload in message",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"<script>alert(1)</script>\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('No script execution in response', function () {",
            "  pm.expect(pm.response.text()).not.to.include('<script>');",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC25 - Stored XSS probe (render at UI)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"<img src=x onerror=alert(1)>\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('No script execution in response', function () {",
            "  pm.expect(pm.response.text()).not.to.include('onerror');",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC26 - SQL injection string in message",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"' OR '1'='1\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('No 5xx error', function () {",
            "    pm.expect(pm.response.code).not.to.be.within(500,599);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC27 - JSON injection / special escapes",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"{\\\"foo\\\": \\\"bar\\\"}\\n\\\\\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('No parser crash', function () {",
            "    pm.expect(pm.response.code).not.to.be.within(500,599);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC28 - Header CRLF / smuggling attempt",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}\\r\\nInjected: evil" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('No 5xx error', function () {",
            "    pm.expect(pm.response.code).not.to.be.within(500,599);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
      "name": "TC29 - Content-Type spoof vs body mismatch",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer {{adminToken}}" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages", "{{messageId_valid}}", "reply"] },
        "body": { "mode": "raw", "raw": "message=Hello&foo=bar" }
      },
      "event": [{
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status code is 400 or 415', function () {",
            "  pm.expect([400,415]).to.include(pm.response.code);",
            "});"
          ],
          "type": "text/javascript"
        }
      }]
    },
    {
        "name": "TC30 - Accept header negotiation (XML)",
        "request": {
            "method": "POST",
            "header": [
            { "key": "Authorization", "value": "Bearer {{adminToken}}" },
            { "key": "Content-Type", "value": "application/json" },
            { "key": "Accept", "value": "application/xml" }
            ],
            "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages","{{messageId_valid}}","reply"] },
            "body": { "mode": "raw", "raw": "{\"message\":\"Hello\"}" }
        },
        "event": [{
            "listen": "test",
            "script": {
            "type": "text/javascript",
            "exec": [
                "pm.test('Status 406 or 201', function () { pm.expect([406,201]).to.include(pm.response.code); });",
                "pm.test('No 5xx', function () { pm.expect(pm.response.code).not.to.be.within(500,599); });",
                "if (pm.response.code === 201) {",
                "  pm.test('Fallback to JSON', function () {",
                "    pm.expect(pm.response.headers.get('Content-Type')).to.match(/application\\/json/i);",
                "  });",
                "  const j = pm.response.json();",
                "  pm.test('Has basic fields', function () {",
                "    pm.expect(j).to.have.property('message');",
                "    pm.expect(j).to.have.property('id').that.is.a('number');",
                "    pm.expect(j).to.have.property('created_at');",
                "  });",
                "}"
            ]
            }
        }]
        },
        {
        "name": "TC31 - Tab/CR characters in message (\\t/\\r)",
        "request": {
            "method": "POST",
            "header": [
            { "key": "Authorization", "value": "Bearer {{adminToken}}" },
            { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/messages/{{messageId_valid}}/reply", "host": ["{{baseUrl}}"], "path": ["messages","{{messageId_valid}}","reply"] },
            "body": { "mode": "raw", "raw": "{\"message\":\"Hello\\tWorld\\rTest\"}" }
        },
        "event": [{
            "listen": "test",
            "script": {
            "type": "text/javascript",
            "exec": [
                "pm.test('Status code is 201', function () { pm.response.to.have.status(201); });",
                "const json = pm.response.json();",
                "pm.expect(json).to.have.property('message');",
                "pm.expect(json).to.have.property('id').that.is.a('number');",
                "pm.expect(json).to.have.property('created_at');"
            ]
            }
        }]
        }
  ]
}